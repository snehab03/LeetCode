Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.
Link : https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/description/

class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(root == NULL){
            return NULL;
        }
        if(root == p || root == q){
            return root;
        }

        TreeNode* leftN = lowestCommonAncestor(root->left,p,q);
        TreeNode* rightN = lowestCommonAncestor(root->right,p,q);
        if(leftN != NULL && rightN != NULL){
            return root;
        }
        if(leftN != NULL){
            return leftN;
        }
        return rightN;
    }
};
